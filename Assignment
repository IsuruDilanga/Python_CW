General Notes
• Use user-defined functions in your solution as appropriate.
• Use descriptive names for your variables and user-defined functions.
• Reference within your code any code adapted from external or other sources.
The University requires a program to predict progression outcomes at the end of each academic
year. You should write this program in Python using the data shown in Table 1.
Table 1: Progression outcomes as defined by the University regulations.
Volume of Credit at Each Level Progression Outcome
Pass Defer Fail
        1 120 0 0 Progress
        2 100 20 0 Progress (module trailer)
        3 100 0 20 Progress (module trailer)
        4 80 40 0 Do not Progress – module retriever
        5 80 20 20 Do not Progress – module retriever
        6 80 0 40 Do not Progress – module retriever
        7 60 60 0 Do not progress – module retriever
        8 60 40 20 Do not progress – module retriever
        9 60 20 40 Do not progress – module retriever
        10 60 0 60 Do not progress – module retriever
        11 40 80 0 Do not progress – module retriever
        12 40 60 20 Do not progress – module retriever
        13 40 40 40 Do not progress – module retriever
        14 40 20 60 Do not progress – module retriever
        15 40 0 80 Exclude
        16 20 100 0 Do not progress – module retriever
        17 20 80 20 Do not progress – module retriever
        18 20 60 40 Do not progress – module retriever
        19 20 40 60 Do not progress – module retriever
        20 20 20 80 Exclude
        21 20 0 100 Exclude
        22 0 120 0 Do not progress – module retriever
        23 0 100 20 Do not progress – module retriever
        24 0 80 40 Do not progress – module retriever
        25 0 60 60 Do not progress – module retriever
        26 0 40 80 Exclude
        27 0 20 100 Exclude
        28 0 0 120 Exclude
        
Part 1 - Main Version
Outcomes
1. The program should allow students to predict their progression outcome at the end of each
   academic year. The program should prompt for the number of credits at pass, defer and fail and
   then display the appropriate progression outcome for an individual student (i.e., progress, trailing,
   module retriever or exclude).
2. Validation
  • The program should display ‘Integer required’ if a credit input is the wrong data type.
  • The program should display ‘Out of range’ if credits entered are not in the range 0, 20, 40,
  60, 80, 100 and 120.
  • The program should display ‘Total incorrect’ if the total of the pass, defer and fail credits is
  not 120.
  • A few marks will be allocated for the efficient use of conditional statements. For example,
  the program does not need 28 conditional statements for 28 outcomes.
3. Multiple Outcomes & Histogram
  • The program loops to allow a staff member to predict progression outcomes for multiple
  students.
  • The program should prompt for credits at pass, defer and fail and display the appropriate
  progression for each individual student until the staff member user enters ‘q’ to quit.
  Optionally you can use an input of ‘y’ to continue.
  • When ‘q’ is entered, the program should produce a ‘histogram’ where each star represents a
  student who achieved a progress outcome in the category range: progress, trailing, module
  retriever and exclude. The histogram should relate to the data input entered by the staff
  member during the program run and work for any number of outcomes.
  • Display the number of students for each progression category and the total number of
  students.
  • Example of a program run and input (in bold). Note: program should exit on ‘q’ to quit. ‘y’ to
  continue shown in the example is optional and depends on your program structure.
  
Part 2 - Vertical Histogram (extension)
Extend your program to add a vertical histogram (stars in a category should go downwards), 
  • If attempted, the code for both staff versions (Part 1 and Part 2) must be in your program and
    submitted for marking.
  • Submit the completed test plan provided with your final part 2 solution.
  
Part 3 - List/Tuple/Directory (extension)
Extend your solution so that the program uses Python to save the input progression data to a list,
tuple or directory. Then access the stored data from the list, tuple, directory and print the data in the
following format below.
  Output: The following should display after the histogram(s)
      Progress - 120, 0, 0
      Progress (module trailer) - 100, 0, 20
      Module retriever - 80, 20, 20
      Module retriever - 60, 0, 60
      Exclude – 40, 0, 80
Submit the completed test plan provided with your final part 3 solution.

Part 4 - Text File
For this part you could create an additional Part 4 program or extending your original version. Use
python to save input progression data to a text file. Later in the program, access the stored data and
print out as shown below. Example output (with data from text file):
    Progress - 120, 0, 0
    Progress (module trailer) - 100, 0, 20
    Module retriever - 80, 20, 20
    Module retriever - 60, 0, 60
    Exclude – 40, 0, 80
Submit the completed test plan provided with your final part 4 solution.
